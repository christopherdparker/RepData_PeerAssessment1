install.packages("foreign")
library(foreign)
?foreign
??foreign
?read.dta
onecrop = read.dta("/Users/cdp18/Desktop/joined_393.dta")
?clogit
?coxph
??clogit
library(survival)
?clogit
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
head(test1)
coxph(Surv(time, status) ~ x + strata(sex), test1)
?clogit
onecrop = mutate(onecrop,chosenmarket = subscriptionmarket == market)
library(dplyr)
onecrop = mutate(onecrop,chosenmarket = subscriptionmarket == market)
hdp <- read.csv("http://www.ats.ucla.edu/stat/data/hdp.csv")
hdp <- within(hdp, {
Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
DID <- factor(DID)
HID <- factor(HID)
})
ggpairs(hdp[, c("IL6", "CRP", "LengthofStay", "Experience")])
require(ggplot2)
require(GGally)
require(reshape2)
require(lme4)
require(compiler)
require(parallel)
require(boot)
install.packages("ggplot2", "GGally", "reshape2", "lme4", "compiler", "parallel", "boot")
install.packages("ggplot2", "GGally", "reshape2", "lme4", "compiler",
"parallel", "boot")
install.packages("ggplot2")
install.packages("GGally")
install.packages("reshape2")
install.packages("lme4")
install.packages("compiler"
install.packages("parallel")
install.packages("boot")
install.packages("compiler")
hdp <- read.csv("http://www.ats.ucla.edu/stat/data/hdp.csv")
hdp <- within(hdp, {
Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
DID <- factor(DID)
HID <- factor(HID)
})
ggpairs(hdp[, c("IL6", "CRP", "LengthofStay", "Experience")])
library(ggplot2)
ggpairs(hdp[, c("IL6", "CRP", "LengthofStay", "Experience")])
library(GGally)
ggpairs(hdp[, c("IL6", "CRP", "LengthofStay", "Experience")])
m <- glmer(remission ~ IL6 + CRP + CancerStage + LengthofStay + Experience +
(1 | DID), data = hdp, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
library(lme4)
m <- glmer(remission ~ IL6 + CRP + CancerStage + LengthofStay + Experience +
(1 | DID), data = hdp, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
print(m, corr = FALSE)
onecrop = read.dta("/Users/cdp18/Desktop/joined_393.dta")
?read.dta
library(foreign)
onecrop = read.dta("/Users/cdp18/Desktop/joined_393.dta")
onecrop = mutate(onecrop,chosenmarket = subscriptionmarket == market)
library(dplyr)
onecrop = mutate(onecrop,chosenmarket = subscriptionmarket == market)
m <- glmer(chosenmarket ~ mean_highprice +
(1 | state), data = hdp, family = binomial)
m <- glmer(chosenmarket ~ mean_highprice +
(1 | state), data = oncecrop, family = binomial)
?glmer
summarize(oncecrop$mean_highprice)
?summarize
summarize(oncecrop, mean_highprice)
onecrop = data.frame(onecrop)
summarize(oncecrop, mean_highprice)
summarize(onecrop, mean_highprice)
sapply(onecrop, mean, na.rm = TRUE)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(hmsic)
library(hmisc)
install.packages("hmisc")
library(hmisc)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library(ggplot2)
?gglot2
?ggplot2
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, color = Age)
?plot
plot(training$CompressiveStrength, col = Age)
plot(training$CompressiveStrength, col = training$Age)
plot(training$CompressiveStrength, col = training$FlyAsh)
hist(training$Super)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
preProcess(training$IL)
preProcess(c(training$IL_11, training$IL_13))
?dplyr
library(dplyr)
?dplyr
?filter
a = select(training, starts_with(IL))
a = select(training, starts_with("IL"))
preProcess(a
)
?preProcess
preProcess(a, method = "pca")
preProcess(a, method = "pca", thresh = 0.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
mytrain = select(training,diagnosis,starts_with("IL"))
?train
train(mytrain)
train(mytrain$diagnosis, method = glm)
train(mytrain, method = glm)
train(mytrain, method = "glm")
train(mytrain$diagnosis, method = "glm")
train(mytrain$diagnosis, mytrain, method = "glm")
train(diagnosis ~ ., data = mytrain, method = "glm")
fit = train(diagnosis ~ ., data = mytrain, method = "glm")
install.packages('e1071', dependencies=TRUE)
fit = train(diagnosis ~ ., data = mytrain, method = "glm")
fit
?confusionMatrix
prediction = predict(fit, newdata = training)
prediction
confusionMatrix(predictions,testing$diagnosis)
confusionMatrix(prediction,testing$diagnosis)
prediction = predict(fit, newdata = testing)
confusionMatrix(prediction,testing$diagnosis)
getwd()
rm(list = ls())
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("int", "Date", "int"))
setwd("/Users/cdp18/GitHub")
setwd("/Users/cdp18/GitHub/RepData/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("int", "Date", "int"))
?read.csv
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "Date", "integer"))
?sapply
apply(data,2,mean)
apply(data,2,mean, na.rm = TRUE)
?mean
apply(data$steps,2,mean, na.rm = TRUE)
apply(data$steps,1,mean, na.rm = TRUE)
apply(data$steps,mean, na.rm = TRUE)
apply(data$steps,2, mean)
apply(data,2, mean)
?apply
apply(data,2, mean, na.rm = TRUE)
tapply(data,2, mean, na.rm = TRUE)
apply(data,2, mean, na.rm = TRUE)
library(dplyr)
?tapply
tapply(data, cycle(data), mean, na.rm = TRUE)
data2 = data.table(data)
library(data.table)
data2 = data.table(data)
data2[,mean=mean(steps),by=group]
data2[,mean(steps),by=group]
data2[,mean(steps),by=date]
ddply(data,~date,summarise,mean=mean(steps))
tapply(data$steps, index = data$date, fun = mean)
tapply(data$steps, INDEX = data$date, fun = mean)
filter(!is.na(steps))
summarize(data, delay = mean(steps,na.rm = TRUE))
?summarize
summarize(group_by(data,date), delay = mean(steps,na.rm = TRUE))
?total
??total
?sum
summarize(group_by(data,date), m = sum(steps,na.rm = TRUE))
hist(dailysteps)
library(dplyr)
library(dplyr)
data = read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "Date", "integer"))
dailysteps = summarize(group_by(data,date), m = sum(steps,na.rm = TRUE))
hist(dailysteps)
hist(dailysteps$numsteps)
library(dplyr)
data = read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "Date", "integer"))
dailysteps = summarize(group_by(data,date), numsteps = sum(steps,na.rm = TRUE))
hist(dailysteps$numsteps)
mean(dailysteps$numsteps)
median(dailysteps$numsteps)
intervalsteps = summarize(group_by(data,interval), avesteps = mean(steps,na.rm = TRUE))
plot(intervalsteps)
max(intervalsteps$avesteps)
?max
intervalsteps$interval[max(intervalsteps$avesteps)]
View(intervalsteps)
intervalsteps$interval[max(intervalsteps$avesteps)==intervalsteps$avesteps]
sum(is.na(data$steps))
data2 = data
?ave
imputesteps = ave(data$steps,data$date FUN = mean)
imputesteps = ave(data$steps,data$date,FUN = mean)
imputesteps = ave(data$steps,data$date,FUN = function(x) mean(x, na.rm = TRUE))
data %>% group_by(date) %>% mutate(imputesteps = mean(steps))
data %>% group_by(date) %>% mutate(imputesteps = mean(steps ,na.rm = TRUE))
View(data)
data2 = data %>% group_by(date) %>% mutate(imputesteps = mean(steps ,na.rm = TRUE))
View(data2)
data2 = data %>% group_by(interval) %>% mutate(imputesteps = mean(steps ,na.rm = TRUE))
View(data2)
data3 = select(data2, -imputesteps)
data2$steps[is.na(data2$steps)] = data2$imputesteps[is.na(data2$steps)]
View(data2)
data2 = data2[-imputesteps]
data2 = data %>%
group_by(date) %>%
mutate(imputesteps = mean(steps ,na.rm = TRUE))
data2$steps[is.na(data2$steps)] = data2$imputesteps[is.na(data2$steps)]
data2 = select(data2,-imputesteps)
data2 = data %>%
group_by(date) %>%
mutate(imputesteps = mean(steps ,na.rm = TRUE))
data2$steps[is.na(data2$steps)] = data2$imputesteps[is.na(data2$steps)]
data2 = select(data2,-imputesteps)
dailysteps = summarize(group_by(data2,date), numsteps = sum(steps,na.rm = TRUE))
hist(dailysteps$numsteps)
mean(dailysteps$numsteps)
median(dailysteps$numsteps)
library(knitr)
